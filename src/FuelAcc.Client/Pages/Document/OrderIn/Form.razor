@using FuelAcc.Client.Shared.Api
@using FuelAcc.Client.Services.Crud
@inject FuelAcc.Client.Shared.PageHistoryState PageHistoryState
@inject IDictionaryService<PartnerDto> PartnersService
@inject IDictionaryService<ProductDto> ProductsService
@inject IDictionaryService<StorageDto> StoragesService


<EditForm Model="@record" OnValidSubmit="@OnValidSubmit">
    @* <FluentValidator TValidator="PersonValidator" /> *@
    <div class="form-group">
        <label>Date :</label>
        <div>
            @record.Date.ToLocalTime()
        </div>
    </div>
    <div class="form-group">
        <label>Number :</label>
        <div>
            <InputText @bind-Value="@record.Number" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => record.Number)" />
        </div>
    </div>
    <div class="form-group">
        <label>Description :</label>
        <div>
            <InputText @bind-Value="@record.Description" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => record.Description)" />
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Partner :</label>
            <div>
                <InputSelect @bind-Value="@record.PartnerId" class="form-control col-sm-3"> 
                    <option value="@(Guid.Empty)">--Select--</option>

                    @if (Partners != null)
                        foreach (var item in Partners)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                </InputSelect>
                <ValidationMessage For="@(() => record.PartnerId)" />
            </div>
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Storage :</label>
            <div>
                <InputSelect @bind-Value="@record.ToStorageId" class="form-control col-sm-3">
                    <option value="@(Guid.Empty)">--Select--</option>

                    @if (Storages != null)
                        foreach (var item in Storages)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                </InputSelect>
                <ValidationMessage For="@(() => record.ToStorageId)" />
            </div>
        </div>
    </div>

    <hr />
    <h3>Lines</h3>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label>Product</label>
        </div>
        <div class="form-group col-md-3">
            <label>Quantity</label>
        </div>
        <div class="form-group col-md-3">
            <label>Price</label>
        </div>
        <div class="form-group col-md-2">
            <label>Sum</label>
        </div>
    </div>
    <ValidationMessage For="@(() => record.Lines)" />
    @if (record.Lines !=null) foreach (var line in record.Lines)
        {
            <div class="form-row">
                <div class="form-group col-md-3">
                    <InputSelect @bind-Value="@line.ProductId" class="form-control col-sm-3">
                        <option value="@(Guid.Empty)">--Select--</option>

                        @if (Products != null)
                            foreach (var item in Products)
                            {
                                <option value="@item.Key">@item.Value</option>
                            }
                    </InputSelect>
                    <ValidationMessage For="@(() => record.ToStorageId)" />
                </div>
                <div class="form-group col-md-3">
                    <InputNumber id="Street" class="form-control" placeholder="Street" @bind-Value="line.Quantity" />
                    <ValidationMessage For="@(() => line.Quantity)" />
                </div>
                <div class="form-group col-md-3">
                    <InputNumber id="City" class="form-control" placeholder="City" @bind-Value="line.Price" />
                    <ValidationMessage For="@(() => line.Price)" />
                </div>
                <div class="form-group col-md-2">
                    @(line.Quantity > 0 && line.Price.HasValue && line.Price.Value > 0 ? line.Quantity * line.Price : 0.0)
                </div>
                <div class="Form-group">
                    <a href="javascript:void(0)" class="btn btn-danger" @onclick="@(()=>OnLineDelete(record, line))">X</a>
                </div>
            </div>
        }
    <div class="form-group">
        <a href="javascript:void(0)" class="btn btn-success" @onclick="@(()=>OnLineAdd(record))">Add Line</a>
    </div>
    <hr />

    <hr/>

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else{
            <NavLink href="/document/orderin/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public OrderInDto record { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public bool loading {get; set;} = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private IReadOnlyCollection<KeyValuePair<Guid, string>> Partners;
    private IReadOnlyCollection<KeyValuePair<Guid, string>> Storages;
    private IReadOnlyCollection<KeyValuePair<Guid, string>> Products;

    protected override async Task OnParametersSetAsync()
    {
        Partners = await PartnersService.LookupItems();
        Storages = await StoragesService.LookupItems();
        Products = await ProductsService.LookupItems();
        await base.OnParametersSetAsync();
    }

    public void OnLineDelete(OrderInDto order, OrderLineDto line)
    {
        order.Lines.Remove(line);
    }

    public void OnLineAdd(OrderInDto order)
    {
        if (order.Lines == null)
            order.Lines = new List<OrderLineDto>();

        order.Lines.Add(new OrderLineDto { });
    }
}