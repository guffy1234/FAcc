@using FuelAcc.ApiClient
@using FuelAcc.Client.Services.Crud
@inject FuelAcc.Client.Shared.PageHistoryState PageHistoryState
@inject IDictionaryService<BranchDto> BranchesService


<EditForm Model="@record" OnValidSubmit="@OnValidSubmit">
    @* <FluentValidator TValidator="PersonValidator" /> *@
    <div class="form-group">
        <label>Name :</label>
        <div>
            <InputText @bind-Value="@record.Name" class="form-control col-sm-3" />
            <ValidationMessage For="@(() => record.Name)" />
        </div>
    </div>
    <div class="form-group ">
        <div>
            <label>Branch :</label>
            <div>
                <InputSelect @bind-Value="@record.BranchId" class="form-control col-sm-3"> 
                    <option value="@(Guid.Empty)">--Select--</option>

                    @if (Branches != null) 
                        foreach (var item in Branches)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                </InputSelect>
                <ValidationMessage For="@(() => record.BranchId)" />
            </div>
        </div>
    </div>


    <hr/>

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading) 
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            @ButtonText
        </button>
        @if (PageHistoryState.CanGoBack()){
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else{
            <NavLink href="/dictionary/storage/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code {
    [Parameter]
    public StorageDto record { get; set; }
    [Parameter]
    public string ButtonText { get; set; } = "Save";
    [Parameter]
    public bool loading {get; set;} = false;
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private IReadOnlyCollection<KeyValuePair<Guid, string>> Branches;

    protected override async Task OnParametersSetAsync()
    {
        Branches = await BranchesService.LookupItems();
        await base.OnParametersSetAsync();
    }
}