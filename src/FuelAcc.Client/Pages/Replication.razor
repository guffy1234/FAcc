@page "/replication/{Page:int}"
@using FuelAcc.Application.DtoCommon.Paging
@using FuelAcc.Client.Services.Crud
@using System.Net.Mime

@inject IAlertService AlertService
@inject NavigationManager navManager
@inject FuelAcc.Client.Shared.PageHistoryState PageHistoryState
@inject ISettingsService SettingsService
@inject IDictionaryService<BranchDto> BranchesService
@inject IReplicationApiClient ApiClient
@inject IFileSaveService FileSaveService

<h1>Replication</h1>

@if (Records == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:20%">Date</th>
                <th style="width:20%">Direction</th>
                <th style="width:20%">Branch</th>
                <th style="width:20%">From</th>
                <th style="width:20%">To</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in Records.Results)
            {
                <tr>
                    <td>@record.Date.ToLocalTime()</td>
                    <td>@(record.Outbound ? "Export" : "Import")</td>
                    <td>@record.BranchName</td>
                    <td>@(record.FromDate == DateTime.MinValue ? "<Begin>" : record.FromDate.ToLocalTime().ToString())</td>
                    <td>@record.ToDate.ToLocalTime()</td>
                </tr>
            }
        </tbody>
    </table>
    <Pager Result=@Records PageChanged=PagerPageChanged />
}


<br />
<h3>Export replication packet</h3>

<EditForm Model="@Record" OnValidSubmit="@ExportPkt">
    <div class="form-group ">
        <div>
            <label>Branch :</label>
            <div>
                <InputSelect @bind-Value="@ExportBranchId" class="form-control col-sm-3">
                    <option value="@(Guid.Empty)">--Select--</option>

                    @if (Branches != null)
                        foreach (var item in Branches)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                </InputSelect>
            </div>
        </div>
    </div>

    <hr />

    <div class="form-group">
        <button class="btn btn-primary">
            Export
        </button>
        @if (PageHistoryState.CanGoBack())
        {
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else
        {
            <NavLink href="/replication/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

<br/>

<h3>Import replication packet</h3>

<EditForm Model="@Record" OnValidSubmit="@ImportPkt">
    <div class="form-group ">
        <div>
            <label>File:</label>
            <div>
                <InputFile accept=".zip" class="form-control-file" type="file" OnChange="HandleSelection" />                
            </div>
        </div>
    </div>

    <hr />

    <div class="form-group">
        <button class="btn btn-primary">
            Import
        </button>
        @if (PageHistoryState.CanGoBack())
        {
            <NavLink href="@PageHistoryState.GetGoBackPage()" class="btn btn-link">Cancel</NavLink>
        }
        else
        {
            <NavLink href="/replication/1" class="btn btn-link">Back</NavLink>
        }
    </div>

</EditForm>

@code{
    [Parameter]
    public int Page { get; set; } = 1;
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    protected string NavigationPrefix;
    protected PagedResult<ReplictionPacketViewDto> Records;

    private class Dummy
    {

    };

    private Dummy Record = new Dummy();

    private Guid ExportBranchId;
    private Guid CurrentBranchId;
    private IReadOnlyCollection<KeyValuePair<Guid, string>> Branches;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        CurrentBranchId = await SettingsService.GetCurrentBranchId();
        var b = await BranchesService.LookupItems();
        // you can't export to self
        Branches = b.Where(x => x.Key != CurrentBranchId).ToArray();

        await ReloadRecords();
    }

    private async Task ReloadRecords()
    {
        var queryDto = new ReplicationQueryDto()
            {
                Page = this.Page,
                PageSize = 5
            };

        var res = await ApiClient.QueryAsync(queryDto);

        Records = new PagedResult<ReplictionPacketViewDto>()
            {
                CurrentPage = res.CurrentPage,
                PageSize = res.PageSize,
                PageCount = res.PageCount,
                RowCount = res.RowCount,
                Results = res.Results
            };

    }

    protected override void OnInitialized()
    {
        NavigationPrefix = "/replication";
        PageHistoryState.AddPageToHistory(navManager.Uri);
        base.OnInitialized();
    }

    protected void PagerPageChanged(int page)
    {
        navManager.NavigateTo($"{NavigationPrefix}/{page}");
        PageHistoryState.AddPageToHistory(navManager.Uri);
    }


    protected async Task ExportPkt()
    {
        try
        {
            var pkt = await ApiClient.ZipGetAsync(ExportBranchId);

            var dispositionStr = pkt.Headers.FirstOrDefault(x => x.Key == "Content-Disposition").Value?.First();

            var contentDisposition = new ContentDisposition(dispositionStr);
            var filename = contentDisposition.FileName;

            await FileSaveService.SaveToFile(filename, pkt.Stream);

            AlertService.Success("Replication packet exported", keepAfterRouteChange: true);
            await ReloadRecords();
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        StateHasChanged();
    }

    private IBrowserFile SelectedFile;

    async Task HandleSelection(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
    }

    protected async Task ImportPkt()
    {
        try
        {
            if (SelectedFile != null)
            {
                // max 50 MB
                var stm = SelectedFile.OpenReadStream(50 * 1024 * 1024);

                var fp = new FileParameter(stm, SelectedFile.Name, SelectedFile.ContentType);
                await ApiClient.ZipPostAsync(fp);

                AlertService.Success("Replication packet imported", keepAfterRouteChange: true);

                await ReloadRecords();
            }
            else
            {
                AlertService.Error("Select ZIP file!");
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        StateHasChanged();
    }
}
