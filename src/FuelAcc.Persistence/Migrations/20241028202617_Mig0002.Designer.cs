// <auto-generated />
using System;
using FuelAcc.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuelAcc.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241028202617_Mig0002")]
    partial class Mig0002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderBaseId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.PersistEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EventAction")
                        .HasColumnType("int");

                    b.Property<int>("EventArea")
                        .HasColumnType("int");

                    b.Property<string>("ObjectClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.ReplictionPacket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Outbound")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("ReplictionPackets");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Rest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageId");

                    b.ToTable("Rests");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderIn", b =>
                {
                    b.HasBaseType("FuelAcc.Domain.Entities.Documents.OrderBase");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ToStorageId");

                    b.ToTable("OrdersIn", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderMove", b =>
                {
                    b.HasBaseType("FuelAcc.Domain.Entities.Documents.OrderBase");

                    b.Property<Guid?>("FromStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MoveType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FromStorageId");

                    b.HasIndex("ToStorageId");

                    b.ToTable("OrdersMove", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderOut", b =>
                {
                    b.HasBaseType("FuelAcc.Domain.Entities.Documents.OrderBase");

                    b.Property<Guid>("FromStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FromStorageId");

                    b.HasIndex("PartnerId");

                    b.ToTable("OrdersOut", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Storage", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany("Storages")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderLine", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithMany("Lines")
                        .HasForeignKey("OrderBaseId");

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.PersistEvent", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.ReplictionPacket", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.Settings", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Rest", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Product", "Product")
                        .WithMany("Rests")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "Storage")
                        .WithMany("Rests")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Transaction", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Registry.Rest", "Destination")
                        .WithMany("OutTransactions")
                        .HasForeignKey("DestinationId");

                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Registry.Rest", "Source")
                        .WithMany("InTransactions")
                        .HasForeignKey("SourceId");

                    b.Navigation("Destination");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderIn", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithOne()
                        .HasForeignKey("FuelAcc.Domain.Entities.Documents.OrderIn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "ToStorage")
                        .WithMany()
                        .HasForeignKey("ToStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("ToStorage");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderMove", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "FromStorage")
                        .WithMany()
                        .HasForeignKey("FromStorageId");

                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithOne()
                        .HasForeignKey("FuelAcc.Domain.Entities.Documents.OrderMove", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "ToStorage")
                        .WithMany()
                        .HasForeignKey("ToStorageId");

                    b.Navigation("FromStorage");

                    b.Navigation("ToStorage");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderOut", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "FromStorage")
                        .WithMany()
                        .HasForeignKey("FromStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithOne()
                        .HasForeignKey("FuelAcc.Domain.Entities.Documents.OrderOut", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromStorage");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Branch", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Product", b =>
                {
                    b.Navigation("Rests");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Storage", b =>
                {
                    b.Navigation("Rests");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderBase", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Rest", b =>
                {
                    b.Navigation("InTransactions");

                    b.Navigation("OutTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
