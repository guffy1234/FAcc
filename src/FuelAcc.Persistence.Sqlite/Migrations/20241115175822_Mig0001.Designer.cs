// <auto-generated />
using System;
using FuelAcc.Persistence.Sqlite.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuelAcc.Persistence.Sqlite.Migrations
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20241115175822_Mig0001")]
    partial class Mig0001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fax")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifierUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<double>("Total")
                        .HasPrecision(14, 2)
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrderBaseId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasPrecision(14, 3)
                        .HasColumnType("REAL");

                    b.Property<double?>("Sum")
                        .HasPrecision(14, 2)
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("OrderBaseId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.PersistEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventAction")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventArea")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjectClass")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjectJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.ReplictionPacket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Outbound")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PreviousId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("ReplictionPackets");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Rest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasPrecision(14, 3)
                        .HasColumnType("REAL");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageId");

                    b.ToTable("Rests");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasPrecision(14, 3)
                        .HasColumnType("REAL");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AppRoles", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AppUsers", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderIn", b =>
                {
                    b.HasBaseType("FuelAcc.Domain.Entities.Documents.OrderBase");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToStorageId")
                        .HasColumnType("TEXT");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ToStorageId");

                    b.ToTable("OrdersIn", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderMove", b =>
                {
                    b.HasBaseType("FuelAcc.Domain.Entities.Documents.OrderBase");

                    b.Property<Guid?>("FromStorageId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MoveType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ToStorageId")
                        .HasColumnType("TEXT");

                    b.HasIndex("FromStorageId");

                    b.HasIndex("ToStorageId");

                    b.ToTable("OrdersMove", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderOut", b =>
                {
                    b.HasBaseType("FuelAcc.Domain.Entities.Documents.OrderBase");

                    b.Property<Guid>("FromStorageId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("TEXT");

                    b.HasIndex("FromStorageId");

                    b.HasIndex("PartnerId");

                    b.ToTable("OrdersOut", (string)null);
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Storage", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany("Storages")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderLine", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithMany("Lines")
                        .HasForeignKey("OrderBaseId");

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.PersistEvent", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.ReplictionPacket", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Other.Settings", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Rest", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Product", "Product")
                        .WithMany("Rests")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "Storage")
                        .WithMany("Rests")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Transaction", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Registry.Rest", "Destination")
                        .WithMany("OutTransactions")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Registry.Rest", "Source")
                        .WithMany("InTransactions")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Destination");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("FuelAcc.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("FuelAcc.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("FuelAcc.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("FuelAcc.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("FuelAcc.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderIn", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithOne()
                        .HasForeignKey("FuelAcc.Domain.Entities.Documents.OrderIn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "ToStorage")
                        .WithMany()
                        .HasForeignKey("ToStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("ToStorage");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderMove", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "FromStorage")
                        .WithMany()
                        .HasForeignKey("FromStorageId");

                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithOne()
                        .HasForeignKey("FuelAcc.Domain.Entities.Documents.OrderMove", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "ToStorage")
                        .WithMany()
                        .HasForeignKey("ToStorageId");

                    b.Navigation("FromStorage");

                    b.Navigation("ToStorage");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderOut", b =>
                {
                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Storage", "FromStorage")
                        .WithMany()
                        .HasForeignKey("FromStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Documents.OrderBase", null)
                        .WithOne()
                        .HasForeignKey("FuelAcc.Domain.Entities.Documents.OrderOut", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelAcc.Domain.Entities.Dictionaries.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromStorage");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Branch", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Product", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("Rests");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Dictionaries.Storage", b =>
                {
                    b.Navigation("Rests");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Documents.OrderBase", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("FuelAcc.Domain.Entities.Registry.Rest", b =>
                {
                    b.Navigation("InTransactions");

                    b.Navigation("OutTransactions");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FuelAcc.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
